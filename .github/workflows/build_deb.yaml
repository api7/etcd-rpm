name: Auto Build ETCD DEB

on:
  push:
    branches: ["main", "release/**"]
    tags:
      - "**"
    paths-ignore:
      - "docs/**"
  pull_request:
    types: [labeled, synchronize]
    branches: ["release/**", "main", "dev/**"]
    paths-ignore:
      - "docs/**"

concurrency:
  group: auto-build-etcd-deb-${{ github.ref }}
  cancel-in-progress: true

jobs:
  auto_build_etcd_deb:
    name: auto build etcd deb package
    runs-on: ubuntu-20.04
    timeout-minutes: 40

    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: setup go
        uses: actions/setup-go@v2.1.4
        with:
          go-version: "1.19"

      - name: install nfpm
        run: |
          go install github.com/goreleaser/nfpm/v2/cmd/nfpm@latest

      - name: Extract etcd version
        id: etcd_version
        shell: bash
        run: |
          echo "##[set-output name=version;]$(cat ./VERSION)"

      - name: download etcd
        run: |
          export VERSION=${{ steps.etcd_version.outputs.version }}
          wget https://github.com/etcd-io/etcd/releases/download/v${VERSION}/etcd-v${VERSION}-linux-amd64.tar.gz
          tar xzvf etcd-v${VERSION}-linux-amd64.tar.gz
          # mv etcd and etcdctl to current folder
          mv etcd-v${VERSION}-linux-amd64/etcd etcd-v${VERSION}-linux-amd64/etcdctl .

      - name: Build deb package
        run: |
          export VERSION=${{ steps.etcd_version.outputs.version }}

          # build etcd deb package
          version=${VERSION} nfpm pkg -p deb -f nfpm.yaml -t etcd-${VERSION}.x86_64.deb

      - name: Publish Artifact
        uses: actions/upload-artifact@v2.2.3
        with:
          name: "etcd-${{ steps.etcd_version.outputs.version }}.x86_64"
          path: "./etcd-${{ steps.etcd_version.outputs.version }}.x86_64.deb"
          retention-days: 1

      - name: Install deb package in ubuntu container
        run: |
          export VERSION=${{ steps.etcd_version.outputs.version }}
          # sudo podman run -d --name ubuntuInstance --systemd true --privileged --net host docker.io/ubuntu:20.04 /usr/lib/systemd/systemd
          # sudo podman run -d --name ubuntuInstance --systemd true --privileged --net host docker.io/ubuntu:20.04 /bin/bash
          # sudo podman cp etcd-${VERSION}.x86_64.deb ubuntuInstance:/etcd-${VERSION}.x86_64.deb
          # sudo podman exec ubuntuInstance bash -c "dpkg -i /etcd-${VERSION}.x86_64.deb"
          # sudo podman exec ubuntuInstance bash -c "/usr/local/bin/etcd --config-file=/etc/etcd/etcd.conf.yaml &"
          # sudo podman exec ubuntuInstance systemctl enable etcd
          # sudo podman exec ubuntuInstance systemctl start etcd

          docker run -d --name ubuntuInstance --privileged --network host docker.io/ubuntu:20.04 /bin/bash
          docker cp etcd-${VERSION}.x86_64.deb ubuntuInstance:/etcd-${VERSION}.x86_64.deb
          docker exec ubuntuInstance bash -c "dpkg -i /etcd-${VERSION}.x86_64.deb"
          docker exec ubuntuInstance bash -c "/usr/local/bin/etcd --config-file=/etc/etcd/etcd.conf.yaml &"

      - name: run test case
        run: |
          export VERSION=${{ steps.etcd_version.outputs.version }}
          ./scripts/etcd_test.sh ${VERSION}

      - name: Create GitHub Release and Upload DEB
        uses: softprops/action-gh-release@v1
        # Only triggered on new tag
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: "etcd-${{ steps.etcd_version.outputs.version }}.x86_64.deb"
          tag_name: ${{ steps.etcd_version.outputs.version }}

      - name: Push to COS
        # Only triggered on new tag
        if: startsWith(github.ref, 'refs/tags/')
        env:
          SECRET_ID: ${{ secrets.QCLOUD_COS_SECRETID }}
          SECRET_KEY: ${{ secrets.QCLOUD_COS_SECRETKEY }}
          BUCKET: api7-enterprise-1301662268
          ENDPOINT: cos.accelerate.myqcloud.com
        run: |
          sudo pip install coscmd
          coscmd config -a ${SECRET_ID} -s ${SECRET_KEY} -b ${BUCKET} -e ${ENDPOINT}
          coscmd upload ./etcd-${{ steps.etcd_version.outputs.version }}.x86_64.deb /workflows/debs/
